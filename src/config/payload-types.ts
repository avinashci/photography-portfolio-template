/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    images: Image;
    galleries: Gallery;
    'blog-posts': BlogPost;
    gear: Gear;
    comments: Comment;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    images: ImagesSelect<false> | ImagesSelect<true>;
    galleries: GalleriesSelect<false> | GalleriesSelect<true>;
    'blog-posts': BlogPostsSelect<false> | BlogPostsSelect<true>;
    gear: GearSelect<false> | GearSelect<true>;
    comments: CommentsSelect<false> | CommentsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    settings: Setting;
    home: Home;
    about: About;
    'site-metadata': SiteMetadatum;
  };
  globalsSelect: {
    settings: SettingsSelect<false> | SettingsSelect<true>;
    home: HomeSelect<false> | HomeSelect<true>;
    about: AboutSelect<false> | AboutSelect<true>;
    'site-metadata': SiteMetadataSelect<false> | SiteMetadataSelect<true>;
  };
  locale: 'en';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  /**
   * User role determines access permissions
   */
  role: 'admin' | 'editor' | 'photographer' | 'viewer';
  /**
   * Brief biography or description
   */
  bio?: string | null;
  /**
   * Profile picture
   */
  avatar?: (string | null) | Image;
  preferences?: {
    defaultLanguage?: 'en' | null;
    /**
     * Receive email notifications for new content
     */
    emailNotifications?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * Individual images with basic metadata
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: string;
  /**
   * Main title of the image
   */
  title: string;
  /**
   * URL-friendly version of title
   */
  slug: string;
  /**
   * Detailed description of the image
   */
  description?: string | null;
  /**
   * Brief caption for the image
   */
  caption?: string | null;
  /**
   * Alternative text for accessibility (required)
   */
  altText: string;
  /**
   * Image URLs for different sizes
   */
  imageUrls: {
    /**
     * Full resolution image URL
     */
    full: string;
    /**
     * Large size image URL (1920px width)
     */
    large?: string | null;
    /**
     * Medium size image URL (1024px width)
     */
    medium?: string | null;
    /**
     * Thumbnail URL (400px width)
     */
    thumbnail?: string | null;
  };
  /**
   * Gallery this image belongs to
   */
  gallery: string | Gallery;
  /**
   * Photography style/genre of this image
   */
  photographyStyle:
    | 'landscape'
    | 'astrophotography'
    | 'wildlife'
    | 'street'
    | 'portrait'
    | 'macro'
    | 'documentary'
    | 'architectural'
    | 'abstract'
    | 'travel';
  /**
   * Where the photo was taken
   */
  location?: {
    /**
     * Location name (e.g., Yosemite National Park)
     */
    name?: string | null;
    /**
     * GPS coordinates
     */
    coordinates?: {
      /**
       * GPS latitude
       */
      latitude?: number | null;
      /**
       * GPS longitude
       */
      longitude?: number | null;
    };
    /**
     * Country where photo was taken
     */
    country?: string | null;
    /**
     * State/Region/Province
     */
    region?: string | null;
    /**
     * City or nearest town
     */
    city?: string | null;
  };
  /**
   * Camera settings and technical information
   */
  technical?: {
    /**
     * Select camera body from gear collection (shows all gear for now)
     */
    cameraBody?: (string | null) | Gear;
    /**
     * Select lens from gear collection (shows all gear for now)
     */
    lensGear?: (string | null) | Gear;
    /**
     * Aperture setting (e.g., f/8)
     */
    aperture?: string | null;
    /**
     * Shutter speed (e.g., 1/125s)
     */
    shutterSpeed?: string | null;
    /**
     * ISO value (e.g., 400)
     */
    iso?: number | null;
    /**
     * Focal length in mm (e.g., 35)
     */
    focalLength?: number | null;
    /**
     * Was flash used?
     */
    flash?: boolean | null;
  };
  /**
   * Post-processing information
   */
  processing?: {
    /**
     * Post-processing techniques used
     */
    postProcessing?: string | null;
    /**
     * Software used for editing (e.g., Lightroom, Photoshop)
     */
    software?: string | null;
    technique?: ('single' | 'hdr' | 'focus-stacking' | 'panoramic' | 'time-blend' | 'composite')[] | null;
  };
  /**
   * Keywords for search and categorization - supports comma-separated input! Type "landscape, nature, mountains" and they'll split automatically when you save.
   */
  keywords?: string[] | null;
  /**
   * Tags for organizing and filtering - supports comma-separated input! Type "featured, portfolio, prints-available" and they'll split automatically when you save.
   */
  tags?: string[] | null;
  /**
   * File metadata and technical details
   */
  fileInfo?: {
    /**
     * Original filename
     */
    filename?: string | null;
    /**
     * File size in bytes
     */
    filesize?: number | null;
    /**
     * MIME type (e.g., image/jpeg)
     */
    mimeType?: string | null;
    /**
     * Image dimensions
     */
    dimensions?: {
      /**
       * Image width in pixels
       */
      width?: number | null;
      /**
       * Image height in pixels
       */
      height?: number | null;
    };
  };
  /**
   * Usage rights - uses site defaults unless custom settings are enabled
   */
  rights?: {
    /**
     * Override default copyright settings for this image?
     */
    useCustomRights?: boolean | null;
    /**
     * Custom copyright holder (overrides site default)
     */
    customCopyright?: string | null;
    /**
     * Custom license type (overrides site default)
     */
    license?: ('all-rights-reserved' | 'cc-by' | 'cc-by-sa' | 'cc-by-nc' | 'public-domain' | 'custom') | null;
    /**
     * Custom attribution text (if different from default)
     */
    customAttribution?: string | null;
    /**
     * Available for print sales?
     */
    availableForPrint?: boolean | null;
    /**
     * Available for commercial licensing?
     */
    availableForLicense?: boolean | null;
    /**
     * Special licensing notes or restrictions (optional)
     */
    specialNotes?: string | null;
  };
  /**
   * Style-specific metadata (appears based on photography style selected)
   */
  styleMetadata?: {
    /**
     * Landscape-specific shooting conditions
     */
    landscape?: {
      /**
       * Weather conditions during capture
       */
      weather?: ('clear' | 'cloudy' | 'stormy' | 'foggy' | 'windy' | 'rain' | 'snow')[] | null;
      timeOfDay?:
        | (
            | 'blue-hour-morning'
            | 'golden-hour-morning'
            | 'sunrise'
            | 'midday'
            | 'afternoon'
            | 'golden-hour-evening'
            | 'sunset'
            | 'blue-hour-evening'
            | 'night'
          )
        | null;
      season?: ('spring' | 'summer' | 'fall' | 'winter') | null;
      /**
       * Elevation in meters
       */
      elevation?: number | null;
    };
    /**
     * Astrophotography-specific details
     */
    astrophotography?: {
      subject?: ('milky-way' | 'star-trails' | 'moon' | 'planets' | 'deep-sky' | 'meteor-shower' | 'aurora')[] | null;
      moonPhase?:
        | (
            | 'new'
            | 'waxing-crescent'
            | 'first-quarter'
            | 'waxing-gibbous'
            | 'full'
            | 'waning-gibbous'
            | 'third-quarter'
            | 'waning-crescent'
          )
        | null;
      lightPollution?:
        | ('bortle-1' | 'bortle-2' | 'bortle-3' | 'bortle-4' | 'bortle-5' | 'bortle-6' | 'bortle-7-plus')
        | null;
      /**
       * Total exposure time in minutes
       */
      exposureTime?: number | null;
      /**
       * Number of images stacked/blended
       */
      stackedImages?: number | null;
    };
    /**
     * Wildlife-specific information
     */
    wildlife?: {
      /**
       * Species name (common or scientific)
       */
      species?: string | null;
      behavior?:
        | ('feeding' | 'hunting' | 'playing' | 'resting' | 'migrating' | 'mating' | 'parenting' | 'territorial')[]
        | null;
      /**
       * Distance to subject in meters
       */
      distance?: number | null;
      /**
       * Habitat type (forest, savanna, etc.)
       */
      habitat?: string | null;
    };
    /**
     * Street photography context
     */
    street?: {
      /**
       * Description of the subject/scene
       */
      subjectMatter?: string | null;
      /**
       * Was this a candid shot?
       */
      candid?: boolean | null;
      /**
       * Did you get permission from subjects?
       */
      permission?: boolean | null;
      /**
       * Social context or story behind the image
       */
      socialContext?: string | null;
    };
  };
  /**
   * Usage statistics and analytics
   */
  usage?: {
    /**
     * Number of times viewed
     */
    viewCount?: number | null;
    /**
     * Number of times downloaded
     */
    downloadCount?: number | null;
    /**
     * Last time this image was viewed
     */
    lastViewed?: string | null;
  };
  /**
   * Feature this image?
   */
  featured?: boolean | null;
  /**
   * Order in gallery (lower numbers appear first)
   */
  sortOrder?: number | null;
  /**
   * When was this photo taken?
   */
  captureDate: string;
  /**
   * Search Engine Optimization and structured data settings for this image
   */
  seo?: {
    /**
     * Custom page title for this image (overrides default). Leave empty to use image title.
     */
    metaTitle?: string | null;
    /**
     * Custom meta description for search engines (150-160 characters). Leave empty to use image description.
     */
    metaDescription?: string | null;
    /**
     * SEO keywords for this image. Include photography style, subject, location, technique.
     */
    keywords?: string[] | null;
    /**
     * Custom OpenGraph image URL for social sharing. Leave empty to use this image.
     */
    ogImage?: string | null;
    /**
     * Custom canonical URL if different from default. Usually leave empty.
     */
    canonicalUrl?: string | null;
    /**
     * Check to prevent search engines from indexing this image page
     */
    noIndex?: boolean | null;
    /**
     * Additional metadata for rich image results in search engines
     */
    imageSchema?: {
      /**
       * Photography genre for structured data
       */
      photographicGenre?:
        | (
            | 'landscape'
            | 'portrait'
            | 'wildlife'
            | 'street'
            | 'astrophotography'
            | 'macro'
            | 'documentary'
            | 'architectural'
            | 'abstract'
            | 'travel'
          )
        | null;
      /**
       * Copyright notice for this specific image (overrides site default)
       */
      copyrightNotice?: string | null;
      /**
       * Photo credit text for attribution
       */
      creditText?: string | null;
    };
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Photo galleries for organizing and presenting collections of images
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "galleries".
 */
export interface Gallery {
  id: string;
  /**
   * Gallery title
   */
  title: string;
  /**
   * URL-friendly version of title
   */
  slug: string;
  /**
   * Detailed description of the gallery
   */
  description: string;
  /**
   * Short excerpt for gallery previews
   */
  excerpt?: string | null;
  /**
   * Primary photography style of this gallery
   */
  photographyStyle:
    | 'landscape'
    | 'astrophotography'
    | 'wildlife'
    | 'street'
    | 'portrait'
    | 'macro'
    | 'documentary'
    | 'architectural'
    | 'abstract'
    | 'travel'
    | 'mixed';
  /**
   * Tags for organization and filtering - supports comma-separated input!
   */
  tags?: string[] | null;
  /**
   * URL of the cover image for this gallery
   */
  coverImage?: string | null;
  /**
   * Is this gallery published?
   */
  published?: boolean | null;
  /**
   * Feature this gallery on homepage?
   */
  featured?: boolean | null;
  /**
   * Display order (lower numbers appear first)
   */
  sortOrder?: number | null;
  /**
   * Search Engine Optimization settings for this gallery
   */
  seo?: {
    /**
     * Custom page title for this gallery (overrides default). Leave empty to use gallery title.
     */
    metaTitle?: string | null;
    /**
     * Custom meta description for search engines (150-160 characters recommended). Leave empty to use gallery excerpt.
     */
    metaDescription?: string | null;
    /**
     * SEO keywords and phrases for this gallery. Add relevant photography terms, locations, styles - supports comma-separated input!
     */
    keywords?: string[] | null;
    /**
     * Custom OpenGraph image URL for social sharing. Leave empty to use cover image.
     */
    ogImage?: string | null;
    /**
     * Custom canonical URL if different from default. Usually leave empty.
     */
    canonicalUrl?: string | null;
    /**
     * Check to prevent search engines from indexing this gallery (for private/draft galleries)
     */
    noIndex?: boolean | null;
  };
  /**
   * When was this gallery published?
   */
  publishedAt?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Photography gear and equipment details
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gear".
 */
export interface Gear {
  id: string;
  category:
    | 'camera-body'
    | 'lens'
    | 'tripod'
    | 'filter'
    | 'lighting'
    | 'storage'
    | 'computer'
    | 'software'
    | 'accessories'
    | 'bags'
    | 'other';
  name: string;
  brand: string;
  model: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  sampleWork?: (string | Image)[] | null;
  purchaseInfo?: {
    purchaseDate?: string | null;
    price?: number | null;
    retailer?: string | null;
    affiliateLink?: string | null;
  };
  rating?: number | null;
  featured?: boolean | null;
  status?: ('current' | 'previous' | 'wishlist' | 'borrowed') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Photography blog posts and articles
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-posts".
 */
export interface BlogPost {
  id: string;
  /**
   * Blog post title
   */
  title: string;
  /**
   * URL-friendly version of title
   */
  slug: string;
  /**
   * Optional subtitle (appears below title in smaller text)
   */
  subtitle?: string | null;
  /**
   * Short excerpt for blog post previews
   */
  excerpt: string;
  /**
   * Date range for trips/events (e.g. "March 15-20, 2024" or "Summer 2023")
   */
  tripDates?: string | null;
  /**
   * Author name for this post (optional)
   */
  author?: string | null;
  /**
   * Flexible content blocks - arrange text, images, and other elements as you want
   */
  contentBlocks: (
    | {
        /**
         * Section title (optional)
         */
        title?: string | null;
        /**
         * Main text content
         */
        content: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        /**
         * Text layout style
         */
        layout?: ('standard' | 'wide' | 'centered' | 'narrow') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'textSection';
      }
    | {
        /**
         * Section title (optional)
         */
        title?: string | null;
        /**
         * Images for this section
         */
        images: (string | Image)[];
        /**
         * How to display the images
         */
        layout: 'single' | 'two-column' | 'three-grid' | 'gallery-grid' | 'full-width' | 'full-bleed';
        /**
         * Force specific aspect ratio (optional)
         */
        aspectRatio?: ('original' | 'square' | 'landscape' | 'portrait') | null;
        /**
         * Caption for the image(s)
         */
        caption?: string | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'imageSection';
      }
    | {
        /**
         * Section title (optional)
         */
        title?: string | null;
        /**
         * Text content
         */
        content: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        /**
         * Featured image for this section
         */
        image: string | Image;
        /**
         * How to arrange text and image
         */
        layout: 'image-left' | 'text-left' | 'image-top' | 'text-top' | 'overlay';
        /**
         * Image size relative to text
         */
        imageSize?: ('small' | 'medium' | 'large') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'textImageSection';
      }
    | {
        /**
         * Section title (optional)
         */
        title?: string | null;
        /**
         * Gallery to showcase
         */
        gallery: string | Gallery;
        /**
         * How to display the gallery
         */
        displayStyle?: ('grid' | 'carousel' | 'masonry' | 'featured-thumbs') | null;
        /**
         * Maximum number of images to show
         */
        maxImages?: number | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'galleryShowcase';
      }
    | {
        /**
         * Section title (optional)
         */
        title?: string | null;
        /**
         * Text content to display alongside images
         */
        content: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        /**
         * Images for carousel or collage (minimum 2)
         */
        images: (string | Image)[];
        /**
         * How to display the images
         */
        displayMode: 'carousel' | 'grid-collage' | 'masonry-collage' | 'stacked';
        /**
         * Where to position the text relative to images
         */
        textPosition: 'right' | 'left' | 'top' | 'bottom';
        /**
         * Force specific aspect ratio for images
         */
        imageRatio?: ('auto' | 'square' | 'landscape' | 'portrait') | null;
        /**
         * Text area size relative to images
         */
        textSize?: ('small' | 'medium' | 'large' | 'xlarge') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'imageCarouselText';
      }
    | {
        /**
         * Section title (optional)
         */
        title?: string | null;
        /**
         * Add text, images, and spacing elements in any order
         */
        elements: (
          | {
              /**
               * Text content
               */
              content: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              /**
               * Text styling
               */
              style?: ('paragraph' | 'large' | 'small' | 'highlighted' | 'quote') | null;
              /**
               * Text alignment
               */
              alignment?: ('left' | 'center' | 'right') | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'textElement';
            }
          | {
              /**
               * Image to display
               */
              image: string | Image;
              /**
               * Image size
               */
              size?: ('full' | 'large' | 'medium' | 'small' | 'thumbnail') | null;
              /**
               * Image alignment
               */
              alignment?: ('left' | 'center' | 'right') | null;
              /**
               * Force specific aspect ratio
               */
              aspectRatio?: ('original' | 'square' | 'landscape' | 'portrait') | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'imageElement';
            }
          | {
              /**
               * Spacing height
               */
              height?: ('small' | 'medium' | 'large' | 'extra-large') | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'spacer';
            }
        )[];
        /**
         * Overall section layout
         */
        layout?: ('standard' | 'wide' | 'full-width' | 'narrow') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'flexibleContent';
      }
    | {
        /**
         * The quote text
         */
        quote: string;
        /**
         * Quote author (optional)
         */
        author?: string | null;
        /**
         * Visual style for the quote
         */
        style?: ('large' | 'emphasized' | 'callout' | 'minimal') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'quoteSection';
      }
  )[];
  /**
   * Featured image for this post
   */
  featuredImage?: (string | null) | Image;
  /**
   * Blog post category
   */
  category:
    | 'photography-tips'
    | 'travel'
    | 'gear-reviews'
    | 'post-processing'
    | 'behind-scenes'
    | 'location-guides'
    | 'tutorials'
    | 'stories'
    | 'news';
  /**
   * Tags for organization and SEO - supports comma-separated input!
   */
  tags?: string[] | null;
  /**
   * Gallery related to this blog post
   */
  relatedGallery?: (string | null) | Gallery;
  /**
   * Estimated reading time in minutes (manual entry)
   */
  readingTime?: number | null;
  /**
   * Target audience level
   */
  difficulty?: ('beginner' | 'intermediate' | 'advanced' | 'all-levels') | null;
  /**
   * Feature this post on homepage?
   */
  featured?: boolean | null;
  /**
   * Total views of this post
   */
  viewCount?: number | null;
  /**
   * Internal: User ID who created this post (for audit)
   */
  authorId?: string | null;
  /**
   * Search Engine Optimization and structured data settings for this blog post
   */
  seo?: {
    /**
     * Custom page title for this blog post (overrides default). Leave empty to use post title.
     */
    metaTitle?: string | null;
    /**
     * Custom meta description for search engines (150-160 characters). Leave empty to use excerpt.
     */
    metaDescription?: string | null;
    /**
     * SEO keywords for this blog post. Include photography terms, locations, techniques - supports comma-separated input!
     */
    keywords?: string[] | null;
    /**
     * Custom OpenGraph image URL for social sharing. Leave empty to use featured image.
     */
    ogImage?: string | null;
    /**
     * Custom canonical URL if different from default. Usually leave empty.
     */
    canonicalUrl?: string | null;
    /**
     * Check to prevent search engines from indexing this blog post
     */
    noIndex?: boolean | null;
    /**
     * Additional structured data for rich search results
     */
    schema?: {
      /**
       * Type of article for structured data
       */
      articleType?: ('BlogPosting' | 'NewsArticle' | 'TravelGuide' | 'HowTo' | 'Review') | null;
      /**
       * Estimated reading time in minutes (auto-calculated if left empty)
       */
      readingTime?: number | null;
      /**
       * Main location featured in this article for travel/location-based content
       */
      photographyLocation?: string | null;
    };
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * User comments on images and blog posts with moderation workflow
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments".
 */
export interface Comment {
  id: string;
  author: {
    /**
     * Commenter name (publicly visible)
     */
    name: string;
  };
  /**
   * Comment content (max 1000 characters)
   */
  content: string;
  /**
   * What this comment is related to
   */
  relatedTo: {
    type: 'image' | 'blog-post';
    /**
     * ID of the related image or blog post
     */
    itemId: string;
    /**
     * Slug of the related content for easy reference
     */
    itemSlug: string;
    /**
     * Title of the related content for admin reference
     */
    itemTitle?: string | null;
  };
  /**
   * Moderation status - only approved comments are shown publicly
   */
  status: 'draft' | 'approved' | 'rejected' | 'spam';
  /**
   * Internal notes for moderation decisions
   */
  moderatorNotes?: string | null;
  /**
   * Security information for spam detection
   */
  security?: {
    /**
     * IP address for rate limiting and spam detection
     */
    ipAddress?: string | null;
    /**
     * User agent string
     */
    userAgent?: string | null;
    /**
     * Time taken to submit form (spam detection)
     */
    submissionTime?: number | null;
    /**
     * Honeypot field value (should be empty)
     */
    honeypot?: string | null;
  };
  moderatedAt?: string | null;
  moderatedBy?: (string | null) | User;
  /**
   * Automated spam detection score (0-100)
   */
  spamScore?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'images';
        value: string | Image;
      } | null)
    | ({
        relationTo: 'galleries';
        value: string | Gallery;
      } | null)
    | ({
        relationTo: 'blog-posts';
        value: string | BlogPost;
      } | null)
    | ({
        relationTo: 'gear';
        value: string | Gear;
      } | null)
    | ({
        relationTo: 'comments';
        value: string | Comment;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  bio?: T;
  avatar?: T;
  preferences?:
    | T
    | {
        defaultLanguage?: T;
        emailNotifications?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images_select".
 */
export interface ImagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  caption?: T;
  altText?: T;
  imageUrls?:
    | T
    | {
        full?: T;
        large?: T;
        medium?: T;
        thumbnail?: T;
      };
  gallery?: T;
  photographyStyle?: T;
  location?:
    | T
    | {
        name?: T;
        coordinates?:
          | T
          | {
              latitude?: T;
              longitude?: T;
            };
        country?: T;
        region?: T;
        city?: T;
      };
  technical?:
    | T
    | {
        cameraBody?: T;
        lensGear?: T;
        aperture?: T;
        shutterSpeed?: T;
        iso?: T;
        focalLength?: T;
        flash?: T;
      };
  processing?:
    | T
    | {
        postProcessing?: T;
        software?: T;
        technique?: T;
      };
  keywords?: T;
  tags?: T;
  fileInfo?:
    | T
    | {
        filename?: T;
        filesize?: T;
        mimeType?: T;
        dimensions?:
          | T
          | {
              width?: T;
              height?: T;
            };
      };
  rights?:
    | T
    | {
        useCustomRights?: T;
        customCopyright?: T;
        license?: T;
        customAttribution?: T;
        availableForPrint?: T;
        availableForLicense?: T;
        specialNotes?: T;
      };
  styleMetadata?:
    | T
    | {
        landscape?:
          | T
          | {
              weather?: T;
              timeOfDay?: T;
              season?: T;
              elevation?: T;
            };
        astrophotography?:
          | T
          | {
              subject?: T;
              moonPhase?: T;
              lightPollution?: T;
              exposureTime?: T;
              stackedImages?: T;
            };
        wildlife?:
          | T
          | {
              species?: T;
              behavior?: T;
              distance?: T;
              habitat?: T;
            };
        street?:
          | T
          | {
              subjectMatter?: T;
              candid?: T;
              permission?: T;
              socialContext?: T;
            };
      };
  usage?:
    | T
    | {
        viewCount?: T;
        downloadCount?: T;
        lastViewed?: T;
      };
  featured?: T;
  sortOrder?: T;
  captureDate?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
        canonicalUrl?: T;
        noIndex?: T;
        imageSchema?:
          | T
          | {
              photographicGenre?: T;
              copyrightNotice?: T;
              creditText?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "galleries_select".
 */
export interface GalleriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  excerpt?: T;
  photographyStyle?: T;
  tags?: T;
  coverImage?: T;
  published?: T;
  featured?: T;
  sortOrder?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
        canonicalUrl?: T;
        noIndex?: T;
      };
  publishedAt?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-posts_select".
 */
export interface BlogPostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  subtitle?: T;
  excerpt?: T;
  tripDates?: T;
  author?: T;
  contentBlocks?:
    | T
    | {
        textSection?:
          | T
          | {
              title?: T;
              content?: T;
              layout?: T;
              id?: T;
              blockName?: T;
            };
        imageSection?:
          | T
          | {
              title?: T;
              images?: T;
              layout?: T;
              aspectRatio?: T;
              caption?: T;
              id?: T;
              blockName?: T;
            };
        textImageSection?:
          | T
          | {
              title?: T;
              content?: T;
              image?: T;
              layout?: T;
              imageSize?: T;
              id?: T;
              blockName?: T;
            };
        galleryShowcase?:
          | T
          | {
              title?: T;
              gallery?: T;
              displayStyle?: T;
              maxImages?: T;
              id?: T;
              blockName?: T;
            };
        imageCarouselText?:
          | T
          | {
              title?: T;
              content?: T;
              images?: T;
              displayMode?: T;
              textPosition?: T;
              imageRatio?: T;
              textSize?: T;
              id?: T;
              blockName?: T;
            };
        flexibleContent?:
          | T
          | {
              title?: T;
              elements?:
                | T
                | {
                    textElement?:
                      | T
                      | {
                          content?: T;
                          style?: T;
                          alignment?: T;
                          id?: T;
                          blockName?: T;
                        };
                    imageElement?:
                      | T
                      | {
                          image?: T;
                          size?: T;
                          alignment?: T;
                          aspectRatio?: T;
                          id?: T;
                          blockName?: T;
                        };
                    spacer?:
                      | T
                      | {
                          height?: T;
                          id?: T;
                          blockName?: T;
                        };
                  };
              layout?: T;
              id?: T;
              blockName?: T;
            };
        quoteSection?:
          | T
          | {
              quote?: T;
              author?: T;
              style?: T;
              id?: T;
              blockName?: T;
            };
      };
  featuredImage?: T;
  category?: T;
  tags?: T;
  relatedGallery?: T;
  readingTime?: T;
  difficulty?: T;
  featured?: T;
  viewCount?: T;
  authorId?: T;
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
        canonicalUrl?: T;
        noIndex?: T;
        schema?:
          | T
          | {
              articleType?: T;
              readingTime?: T;
              photographyLocation?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gear_select".
 */
export interface GearSelect<T extends boolean = true> {
  category?: T;
  name?: T;
  brand?: T;
  model?: T;
  description?: T;
  sampleWork?: T;
  purchaseInfo?:
    | T
    | {
        purchaseDate?: T;
        price?: T;
        retailer?: T;
        affiliateLink?: T;
      };
  rating?: T;
  featured?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments_select".
 */
export interface CommentsSelect<T extends boolean = true> {
  author?:
    | T
    | {
        name?: T;
      };
  content?: T;
  relatedTo?:
    | T
    | {
        type?: T;
        itemId?: T;
        itemSlug?: T;
        itemTitle?: T;
      };
  status?: T;
  moderatorNotes?: T;
  security?:
    | T
    | {
        ipAddress?: T;
        userAgent?: T;
        submissionTime?: T;
        honeypot?: T;
      };
  moderatedAt?: T;
  moderatedBy?: T;
  spamScore?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * Global site settings and configuration
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  /**
   * Basic site information
   */
  site: {
    /**
     * Site name/title
     */
    name: string;
    /**
     * Site tagline/subtitle
     */
    tagline?: string | null;
    /**
     * Site description for SEO
     */
    description?: string | null;
    /**
     * Website domain (e.g., "yoursite.com" - used for structured data and social links)
     */
    domain: string;
    /**
     * Full website URL (e.g., "https://yoursite.com" - used in metadata and sharing)
     */
    url: string;
    /**
     * SEO keywords for the site - supports comma-separated input!
     */
    keywords?: string[] | null;
    /**
     * Site favicon
     */
    favicon?: (string | null) | Image;
  };
  /**
   * Social media profiles
   */
  social?: {
    /**
     * Instagram profile URL
     */
    instagram?: string | null;
    /**
     * Twitter/X profile URL
     */
    twitter?: string | null;
    /**
     * Twitter/X username (without @, e.g., "yourhandle" - used for social sharing)
     */
    twitterHandle?: string | null;
    /**
     * Facebook page URL
     */
    facebook?: string | null;
    /**
     * LinkedIn profile URL
     */
    linkedin?: string | null;
    /**
     * YouTube channel URL
     */
    youtube?: string | null;
    /**
     * TikTok profile URL
     */
    tiktok?: string | null;
    /**
     * Pinterest profile URL
     */
    pinterest?: string | null;
    /**
     * Flickr profile URL
     */
    flickr?: string | null;
    /**
     * Behance portfolio URL
     */
    behance?: string | null;
    /**
     * 500px profile URL
     */
    fiveHundredPx?: string | null;
  };
  /**
   * Header branding settings - Logo URL takes priority, text is fallback
   */
  branding?: {
    /**
     * Logo image URL (leave empty to show text instead)
     */
    logoUrl?: string | null;
    /**
     * Logo alt text for accessibility
     */
    logoAlt?: string | null;
    /**
     * Logo height in pixels (20-100)
     */
    logoHeight?: number | null;
    /**
     * Header title text (fallback when no logo or additional text)
     */
    title?: string | null;
    /**
     * Header subtitle text (fallback when no logo or additional text)
     */
    subtitle?: string | null;
  };
  /**
   * Navigation menus
   */
  navigation?: {
    /**
     * Header navigation items
     */
    header?:
      | {
          label: string;
          url: string;
          openInNewTab?: boolean | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Footer navigation items
     */
    footer?:
      | {
          label: string;
          url: string;
          openInNewTab?: boolean | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * SEO and analytics settings
   */
  seo?: {
    /**
     * Default page title template
     */
    defaultTitle?: string | null;
    /**
     * Separator for page titles
     */
    titleSeparator?: string | null;
    /**
     * Default meta description
     */
    defaultDescription?: string | null;
    /**
     * Default social sharing image
     */
    defaultImage?: (string | null) | Image;
    /**
     * Google Analytics tracking ID
     */
    googleAnalyticsId?: string | null;
    /**
     * Google Site Verification code
     */
    googleSiteVerification?: string | null;
    /**
     * Custom robots.txt content
     */
    robots?: string | null;
  };
  /**
   * Photography-specific settings
   */
  photography?: {
    /**
     * Watermark settings for images
     */
    watermark?: {
      enabled?: boolean | null;
      image?: (string | null) | Image;
      /**
       * Watermark opacity (0-100)
       */
      opacity?: number | null;
      position?: ('bottom-right' | 'bottom-left' | 'top-right' | 'top-left' | 'center') | null;
    };
    /**
     * Image quality settings for different sizes
     */
    imageQuality?: {
      /**
       * Thumbnail quality (1-100)
       */
      thumbnail?: number | null;
      /**
       * Medium size quality (1-100)
       */
      medium?: number | null;
      /**
       * Large size quality (1-100)
       */
      large?: number | null;
    };
    /**
     * Image protection settings
     */
    protections?: {
      /**
       * Disable right-click on images
       */
      rightClickDisabled?: boolean | null;
      /**
       * Disable image dragging
       */
      dragDisabled?: boolean | null;
      /**
       * Disable printing pages with images
       */
      printDisabled?: boolean | null;
    };
  };
  /**
   * Performance optimization settings
   */
  performance?: {
    /**
     * Enable lazy loading for images
     */
    lazyLoading?: boolean | null;
    /**
     * Serve WebP images when supported
     */
    webpEnabled?: boolean | null;
    /**
     * Cache max age in seconds (86400 = 24 hours)
     */
    cacheMaxAge?: number | null;
    /**
     * Number of critical images to preload
     */
    preloadCriticalImages?: number | null;
  };
  /**
   * Footer content and legal information
   */
  footer?: {
    /**
     * Copyright statement for all images (use {year} for current year)
     */
    copyrightStatement?: string | null;
    /**
     * Notice about image usage rights
     */
    imageRightsNotice?: string | null;
    /**
     * Which legal pages to show in footer
     */
    legalPages?: {
      showTerms?: boolean | null;
      showPrivacy?: boolean | null;
      showImageRights?: boolean | null;
    };
    /**
     * Show social media links in footer
     */
    showSocialMedia?: boolean | null;
  };
  /**
   * Site maintenance settings
   */
  maintenance?: {
    /**
     * Enable maintenance mode
     */
    enabled?: boolean | null;
    /**
     * Maintenance mode message
     */
    message?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * IP addresses allowed during maintenance
     */
    allowedIPs?: string[] | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Homepage content and settings
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home".
 */
export interface Home {
  id: string;
  hero: {
    /**
     * Main hero title
     */
    title: string;
    /**
     * Hero subtitle
     */
    subtitle: string;
    /**
     * Hero description text (optional - leave empty for minimal hero)
     */
    description?: string | null;
    /**
     * Optional inspirational quote to display instead of title/subtitle
     */
    quote?: string | null;
    /**
     * Author of the quote (required if quote is provided)
     */
    quoteAuthor?: string | null;
    /**
     * Select images for the hero carousel. Images will auto-advance every 5 seconds. All image metadata (title, description, etc.) will be pulled from the selected images.
     */
    heroImages?: (string | Image)[] | null;
  };
  featured?: {
    /**
     * Show featured galleries section on homepage
     */
    showFeaturedGalleries?: boolean | null;
    featuredGalleriesTitle?: string | null;
    featuredGalleriesDescription?: string | null;
  };
  aboutPreview?: {
    showAboutPreview?: boolean | null;
    aboutTitle?: string | null;
    aboutText?: string | null;
  };
  seo?: {
    /**
     * Custom page title for homepage (overrides auto-generated title)
     */
    metaTitle?: string | null;
    /**
     * Meta description for search engines (150-160 characters recommended)
     */
    metaDescription?: string | null;
    /**
     * SEO keywords for the homepage (in addition to site-wide keywords) - supports comma-separated input!
     */
    keywords?: string[] | null;
    /**
     * Custom OpenGraph image URL for social sharing. Leave empty to use first hero image.
     */
    ogImage?: string | null;
    /**
     * Custom Twitter card image URL. Leave empty to use OG image or first hero image.
     */
    twitterImage?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * About page content and settings
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about".
 */
export interface About {
  id: string;
  header: {
    title: string;
    subtitle?: string | null;
    /**
     * Hero image URL
     */
    heroImage?: string | null;
  };
  gearSection?: {
    /**
     * Show the photography gear section at the bottom of the about page
     */
    showGearSection?: boolean | null;
    /**
     * Title for the gear section
     */
    gearTitle?: string | null;
    /**
     * Description text below the gear section title
     */
    gearDescription?: string | null;
    /**
     * Maximum number of gear items to show
     */
    maxGearItems?: number | null;
  };
  /**
   * Flexible content blocks for your About page - arrange paragraphs, images, and sections as needed
   */
  contentBlocks: (
    | {
        /**
         * Your full name
         */
        name: string;
        /**
         * Professional title (e.g., "Photographer & Developer")
         */
        title: string;
        /**
         * Your location (optional)
         */
        location?: string | null;
        /**
         * Brief introduction paragraph
         */
        introduction: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        /**
         * Profile photo
         */
        profileImage?: (string | null) | Image;
        /**
         * How to arrange the hero content
         */
        layout?: ('image-right' | 'image-left' | 'image-top' | 'centered') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'heroSection';
      }
    | {
        /**
         * Section title (optional)
         */
        title?: string | null;
        /**
         * Paragraph content
         */
        content: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        /**
         * Text styling and layout
         */
        style?: ('standard' | 'large' | 'centered' | 'narrow' | 'wide') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'textParagraph';
      }
    | {
        /**
         * The quote text
         */
        quote: string;
        /**
         * Quote author or context (optional)
         */
        author?: string | null;
        style?: ('large' | 'emphasized' | 'callout' | 'minimal') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'quoteBlock';
      }
    | {
        /**
         * Image to display
         */
        image: string | Image;
        /**
         * Image caption (optional)
         */
        caption?: string | null;
        /**
         * Image size
         */
        size?: ('small' | 'medium' | 'large' | 'full') | null;
        alignment?: ('left' | 'center' | 'right') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'imageBlock';
      }
    | {
        /**
         * Section title (e.g., "Photography Skills", "Technologies")
         */
        title: string;
        /**
         * Optional description before the list
         */
        description?: string | null;
        /**
         * List of skills, technologies, or specializations
         */
        skills: {
          /**
           * Skill or technology name
           */
          name: string;
          /**
           * Brief description (optional)
           */
          description?: string | null;
          id?: string | null;
        }[];
        /**
         * How to display the skills
         */
        layout?: ('grid' | 'list' | 'inline' | 'tags') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'skillsList';
      }
    | {
        /**
         * Section title (optional)
         */
        title?: string | null;
        /**
         * Text content
         */
        content: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        /**
         * Accompanying image
         */
        image: string | Image;
        /**
         * Arrangement of text and image
         */
        layout?: ('image-right' | 'image-left' | 'image-top' | 'text-top') | null;
        imageSize?: ('small' | 'medium' | 'large') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'textImageBlock';
      }
    | {
        /**
         * Section title (optional)
         */
        title?: string | null;
        /**
         * Description before gallery (optional)
         */
        description?: string | null;
        /**
         * Gallery to showcase
         */
        gallery: string | Gallery;
        /**
         * Maximum number of images to show
         */
        maxImages?: number | null;
        /**
         * Show "View Full Gallery" link?
         */
        showGalleryLink?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'galleryShowcase';
      }
    | {
        /**
         * Section title (optional)
         */
        title?: string | null;
        /**
         * Description before links (optional)
         */
        description?: string | null;
        links: {
          /**
           * Platform name (e.g., "Instagram", "GitHub")
           */
          platform: string;
          /**
           * Profile URL
           */
          url: string;
          /**
           * Username/handle (optional)
           */
          username?: string | null;
          /**
           * Brief description (optional)
           */
          description?: string | null;
          id?: string | null;
        }[];
        /**
         * How to display the social links
         */
        style?: ('buttons' | 'icons' | 'list') | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'socialLinks';
      }
    | {
        /**
         * Amount of spacing
         */
        size?: ('small' | 'medium' | 'large' | 'xl') | null;
        /**
         * Show a visual divider line?
         */
        showDivider?: boolean | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'spacer';
      }
  )[];
  /**
   * Search Engine Optimization and structured data settings for the About page
   */
  seo?: {
    /**
     * Custom page title for the About page (overrides default). Leave empty to use site default.
     */
    metaTitle?: string | null;
    /**
     * Custom meta description for search engines (150-160 characters). Leave empty to use auto-generated description.
     */
    metaDescription?: string | null;
    /**
     * SEO keywords for the About page. Include your name, photography specialties, and location - supports comma-separated input!
     */
    keywords?: string[] | null;
    /**
     * Custom OpenGraph image URL for social sharing. Leave empty to use profile image or default.
     */
    ogImage?: string | null;
    /**
     * Custom canonical URL if different from default. Usually leave empty.
     */
    canonicalUrl?: string | null;
    /**
     * Enhanced person schema data for rich search results
     */
    schema?: {
      /**
       * Professional job title for structured data (overrides config setting)
       */
      jobTitle?: string | null;
      /**
       * Company or organization name (if applicable)
       */
      worksFor?: string | null;
      /**
       * Educational background (school, university, etc.)
       */
      alumniOf?: string | null;
      /**
       * Notable awards or recognitions
       */
      awards?: string[] | null;
      /**
       * Languages you speak
       */
      knowsLanguage?: string[] | null;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Personal identity and branding - your name, title, bio, and professional info (site settings managed separately)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-metadata".
 */
export interface SiteMetadatum {
  id: string;
  /**
   * Personal information and identity
   */
  personal: {
    /**
     * Personal name (e.g., "Your Full Name")
     */
    name: string;
    /**
     * Full formal name (if different from display name)
     */
    fullName?: string | null;
    /**
     * Professional title (e.g., "Professional Photographer", "Visual Artist")
     */
    title: string;
    /**
     * Current location/city
     */
    location?: string | null;
    /**
     * Contact email (optional - leave empty for portfolio-only sites)
     */
    email?: string | null;
    /**
     * Short biography for about sections
     */
    bio?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Profile photo/avatar
     */
    avatar?: (string | null) | Image;
  };
  /**
   * Legal and copyright defaults - images inherit these unless custom rights are enabled
   */
  legal?: {
    /**
     * Copyright holder name (defaults to personal name if empty)
     */
    copyrightHolder?: string | null;
    /**
     * Copyright start year
     */
    copyrightYear?: number | null;
    /**
     * Default license type for all images (can be overridden per image)
     */
    defaultLicense?: ('all-rights-reserved' | 'cc-by' | 'cc-by-sa' | 'cc-by-nc' | 'public-domain' | 'custom') | null;
    /**
     * Default attribution text (optional, for Creative Commons licenses)
     */
    defaultAttribution?: string | null;
    /**
     * Default: Are images available for print by default?
     */
    availableForPrint?: boolean | null;
    /**
     * Default: Are images available for licensing by default?
     */
    availableForLicense?: boolean | null;
    /**
     * Legal business name (if different from personal name)
     */
    businessName?: string | null;
    /**
     * Business registration number (optional)
     */
    businessRegistration?: string | null;
    /**
     * Tax identification number (optional, private)
     */
    taxId?: string | null;
  };
  /**
   * Professional credentials and services
   */
  professional?: {
    /**
     * Years of professional experience
     */
    yearsExperience?: number | null;
    /**
     * Photography specialties (e.g., "Portrait", "Landscape", "Wedding")
     */
    specialties?: string[] | null;
    /**
     * Professional certifications and awards
     */
    certifications?:
      | {
          name: string;
          organization: string;
          year?: number | null;
          /**
           * Link to certification details (optional)
           */
          url?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Primary equipment/camera gear
     */
    equipment?: string[] | null;
    /**
     * Photography services offered
     */
    services?:
      | {
          name: string;
          description?: string | null;
          /**
           * Price range or "Contact for pricing"
           */
          price?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  site?:
    | T
    | {
        name?: T;
        tagline?: T;
        description?: T;
        domain?: T;
        url?: T;
        keywords?: T;
        favicon?: T;
      };
  social?:
    | T
    | {
        instagram?: T;
        twitter?: T;
        twitterHandle?: T;
        facebook?: T;
        linkedin?: T;
        youtube?: T;
        tiktok?: T;
        pinterest?: T;
        flickr?: T;
        behance?: T;
        fiveHundredPx?: T;
      };
  branding?:
    | T
    | {
        logoUrl?: T;
        logoAlt?: T;
        logoHeight?: T;
        title?: T;
        subtitle?: T;
      };
  navigation?:
    | T
    | {
        header?:
          | T
          | {
              label?: T;
              url?: T;
              openInNewTab?: T;
              id?: T;
            };
        footer?:
          | T
          | {
              label?: T;
              url?: T;
              openInNewTab?: T;
              id?: T;
            };
      };
  seo?:
    | T
    | {
        defaultTitle?: T;
        titleSeparator?: T;
        defaultDescription?: T;
        defaultImage?: T;
        googleAnalyticsId?: T;
        googleSiteVerification?: T;
        robots?: T;
      };
  photography?:
    | T
    | {
        watermark?:
          | T
          | {
              enabled?: T;
              image?: T;
              opacity?: T;
              position?: T;
            };
        imageQuality?:
          | T
          | {
              thumbnail?: T;
              medium?: T;
              large?: T;
            };
        protections?:
          | T
          | {
              rightClickDisabled?: T;
              dragDisabled?: T;
              printDisabled?: T;
            };
      };
  performance?:
    | T
    | {
        lazyLoading?: T;
        webpEnabled?: T;
        cacheMaxAge?: T;
        preloadCriticalImages?: T;
      };
  footer?:
    | T
    | {
        copyrightStatement?: T;
        imageRightsNotice?: T;
        legalPages?:
          | T
          | {
              showTerms?: T;
              showPrivacy?: T;
              showImageRights?: T;
            };
        showSocialMedia?: T;
      };
  maintenance?:
    | T
    | {
        enabled?: T;
        message?: T;
        allowedIPs?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home_select".
 */
export interface HomeSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        subtitle?: T;
        description?: T;
        quote?: T;
        quoteAuthor?: T;
        heroImages?: T;
      };
  featured?:
    | T
    | {
        showFeaturedGalleries?: T;
        featuredGalleriesTitle?: T;
        featuredGalleriesDescription?: T;
      };
  aboutPreview?:
    | T
    | {
        showAboutPreview?: T;
        aboutTitle?: T;
        aboutText?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
        twitterImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about_select".
 */
export interface AboutSelect<T extends boolean = true> {
  header?:
    | T
    | {
        title?: T;
        subtitle?: T;
        heroImage?: T;
      };
  gearSection?:
    | T
    | {
        showGearSection?: T;
        gearTitle?: T;
        gearDescription?: T;
        maxGearItems?: T;
      };
  contentBlocks?:
    | T
    | {
        heroSection?:
          | T
          | {
              name?: T;
              title?: T;
              location?: T;
              introduction?: T;
              profileImage?: T;
              layout?: T;
              id?: T;
              blockName?: T;
            };
        textParagraph?:
          | T
          | {
              title?: T;
              content?: T;
              style?: T;
              id?: T;
              blockName?: T;
            };
        quoteBlock?:
          | T
          | {
              quote?: T;
              author?: T;
              style?: T;
              id?: T;
              blockName?: T;
            };
        imageBlock?:
          | T
          | {
              image?: T;
              caption?: T;
              size?: T;
              alignment?: T;
              id?: T;
              blockName?: T;
            };
        skillsList?:
          | T
          | {
              title?: T;
              description?: T;
              skills?:
                | T
                | {
                    name?: T;
                    description?: T;
                    id?: T;
                  };
              layout?: T;
              id?: T;
              blockName?: T;
            };
        textImageBlock?:
          | T
          | {
              title?: T;
              content?: T;
              image?: T;
              layout?: T;
              imageSize?: T;
              id?: T;
              blockName?: T;
            };
        galleryShowcase?:
          | T
          | {
              title?: T;
              description?: T;
              gallery?: T;
              maxImages?: T;
              showGalleryLink?: T;
              id?: T;
              blockName?: T;
            };
        socialLinks?:
          | T
          | {
              title?: T;
              description?: T;
              links?:
                | T
                | {
                    platform?: T;
                    url?: T;
                    username?: T;
                    description?: T;
                    id?: T;
                  };
              style?: T;
              id?: T;
              blockName?: T;
            };
        spacer?:
          | T
          | {
              size?: T;
              showDivider?: T;
              id?: T;
              blockName?: T;
            };
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
        ogImage?: T;
        canonicalUrl?: T;
        schema?:
          | T
          | {
              jobTitle?: T;
              worksFor?: T;
              alumniOf?: T;
              awards?: T;
              knowsLanguage?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-metadata_select".
 */
export interface SiteMetadataSelect<T extends boolean = true> {
  personal?:
    | T
    | {
        name?: T;
        fullName?: T;
        title?: T;
        location?: T;
        email?: T;
        bio?: T;
        avatar?: T;
      };
  legal?:
    | T
    | {
        copyrightHolder?: T;
        copyrightYear?: T;
        defaultLicense?: T;
        defaultAttribution?: T;
        availableForPrint?: T;
        availableForLicense?: T;
        businessName?: T;
        businessRegistration?: T;
        taxId?: T;
      };
  professional?:
    | T
    | {
        yearsExperience?: T;
        specialties?: T;
        certifications?:
          | T
          | {
              name?: T;
              organization?: T;
              year?: T;
              url?: T;
              id?: T;
            };
        equipment?: T;
        services?:
          | T
          | {
              name?: T;
              description?: T;
              price?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}